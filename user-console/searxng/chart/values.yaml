image:
  registry: docker.io
  repository: searxng/searxng
  tag: ""
  pullPolicy: IfNotPresent

env: []
  # - name: TZ
  #   value: "Europe/London"

config:
  settings:
    enabled: true
    data: |-
      use_default_settings: true

      server:
        secret_key: "57dc63125e7eef404481411b99c21fb9a5763b724b0bc88f2440ef373cf94809"
        limiter: false
        image_proxy: true
        port: 8080
        bind_address: "0.0.0.0"

      ui:
        static_use_hash: true

      search:
        safe_search: 0
        autocomplete: ""
        default_lang: ""
        formats:
          - html
          - json
  limiter:
    enabled: true
    data: |-
      [botdetection.ip_limit]
      # activate link_token method in the ip_limit method
      link_token = true

  uwsgi:
    enabled: true
    data: |-
      [uwsgi]
      # Who will run the code
      uid = searxng
      gid = searxng

      # Number of workers (usually CPU count)
      # default value: %k (= number of CPU core, see Dockerfile)
      workers = %k

      # Number of threads per worker
      # default value: 4 (see Dockerfile)
      threads = 4

      # The right granted on the created socket
      chmod-socket = 666

      # Plugin to use and interpreter config
      single-interpreter = true
      master = true
      plugin = python3
      lazy-apps = true
      enable-threads = 4

      # Module to import
      module = searx.webapp

      # Virtualenv and python path
      pythonpath = /usr/local/searxng/
      chdir = /usr/local/searxng/searx/

      # automatically set processes name to something meaningful
      auto-procname = true

      # Disable request logging for privacy
      disable-logging = true
      log-5xx = true

      # Set the max size of a request (request-body excluded)
      buffer-size = 8192

      # No keep alive
      # See https://github.com/searx/searx-docker/issues/24
      add-header = Connection: close

      # uwsgi serves the static files
      static-map = /static=/usr/local/searxng/searx/static
      # expires set to one day
      static-expires = /* 86400
      static-gzip-all = True
      offload-threads = 4

resources:
  limits:
    cpu: 4
    memory: 8Gi

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - host: chart-example.local
    #   paths:
    #     - path: /
    #       pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}
affinity: {}
tolerations: []
